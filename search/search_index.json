{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to my Website!","text":""},{"location":"#about-me","title":"About me","text":"<p>Just your everyday humble private citizen treading through the idiosyncrasies of life. I have an affinity for computers, summers in Asia, pets, The Simpsons, all-you-can-eat, video games, weightlifting, biking, and hiking-- among other things.</p> <p>I graduated with a B.S. in Computer Science from UC Davis in June 2016, pursuing a meaningful career in the world of IT. I make an impact by being dependable and approachable. I wear hats in help desk, systems administration, network engineering, QA, SRE/DevOps, and more. I'm eager to learn.</p>"},{"location":"#resume","title":"Resume","text":"<p>My resume can be downloaded here.</p>"},{"location":"#interests","title":"Interests","text":"<p>Just various things I've built or dabbled in.</p>"},{"location":"#webmaster","title":"Webmaster","text":"<p>Zongzi House Restaurant Business Website www.zongzihouse.com and Square Up</p> <p></p> <p>Besides this personal portfolio site, I host a restaurant homepage, zongzihouse.com, developed from scratch with no bootstrap or templates, and using images drawn by me using my MacBook Air's trackpad.</p>"},{"location":"#discord-bot","title":"Discord Bot","text":"<p>GitHub repo </p> <p>My Discord bot is occasionally being developed with whatever idea comes to mind. It began as a learning experience for the OpenAI API but expanded with Gemini API. This will eventually be a swiss army knife bot, with features that my friends and I would enjoy.</p>"},{"location":"#home-lab","title":"Home Lab","text":"<p>I set up a rather unnecessarily complex home network that takes advantage of pfSense routing and firewall. My goal was to isolate networks for LAN, IoT, gaming, and security camera devices.</p> <p>pfSense is running on an old laptop in a router-on-a-stick configuration. My ESXi host runs services such as piHole, FreeNAS, Jellyfin, and game servers. More than satisfied with this inexpensive 32GB host. I'd say that's the spirit of homelab, yeah?</p>"},{"location":"#desktop-pc","title":"Desktop PC","text":"<p>PCpartpicker List</p> <p> </p> <p>Computers have been a fun hobby since I was little. It wasn't until college when I had a bit of spending money that I finally built my own. Since then, I've built for myself and others, most notably an i7-4770k build that I stretched to around 6 years (with updates here and there) and my current 5600X-based build that I built in November 2020.</p>"},{"location":"#design","title":"Design","text":"<p>Behance Profile</p> <p></p> <p>I like to dabble in photography and design. I also take joy in face swapping using Photoshop, but I can't demonstrate those here in respect of privacy.</p>"},{"location":"#travel","title":"Travel","text":"<p>Saying \"I like to travel\" is really clich\u00e9, but it really is that exhilarating.</p> <p>I had the time of my life traveling in Asia. I've toured all over China, from the vast tea fields in Hangzhou, the grandest historic architecture in Beijing, the famous filming set of the old Romance of the Three Kingdoms drama, to arduous mountain trails amongst the humid summer heat. In Japan, I've had the joy of tasting all the food like made-to-order sushi, masterfully prepared tonkatsu and gyukatsu, and irresistible fast food from local and western chains. I even conquered a mountain in the form of a bowl of ramen at Ramen Jiro. Also, with activities such as urban hiking, batting cages, and arcades, it was easy to get caught in its pace. Lastly, peaking Mt Fuji was a feeling like no other.</p>"},{"location":"#contact-me","title":"Contact me","text":"<p> Email: hello@jamestam.me  LinkedIn: linkedin.com/in/jkitam/  GitHub: github.com/jktam</p>"},{"location":"More%20Randomness/ayce/","title":"Making the most out of AYCE sushi","text":"<p>Typical rules at an AYCE establishment:</p> <ul> <li>Charging for waste</li> <li>Limited orders per round</li> <li>Time limit at table</li> </ul> <p>As a rule of thumb for an AYCE partaker... enjoy your meal... especially if you are fortunate to have good company and spare change for some delectable indulgence.</p> <p>With that said, here are my tips on how to teach 'em a lesson.</p> <p></p> <ul> <li>Big ticket items such as:<ul> <li>Sweet shrimp (amaebi)</li> <li>Surf clams (hokkigai)</li> <li>Soft shell crab (best if whole, but it's usually in a roll)</li> <li>Belly (toro) cuts of fish (are these expensive? I just think they taste good)</li> </ul> </li> <li>Sashimi if they have it, but otherwise nigiris.     *for nigiris- cut off a portion of the rice but not enough to be noticeable waste, and spread the rice around to make it less apparent<ul> <li>in California, salmon is usually better than the tuna here. Of course, it depends on the restaurant, but generally an AYCE restaurant will be getting the least expensive per quality</li> </ul> </li> <li>Make sure you mostly order things the other guests at the table will eat with you. If you are eating entire orders by yourself, you will get full early.</li> <li>Save things you want to try but you'd normally wouldn't order otherwise, towards the end of the meal. I call these \"ignorants\". You might have to take responsibility for these orders.</li> <li>Don't starve yourself in anticipation for the meal. You can eat less but don't go hungry. Don't fast the day before. You want to be metabolized, and be able to eat more.</li> <li>Be good to your digestive system and chew your food rather than gulp everything down.</li> <li>Drink lots of water every day. (This is actually life advice)</li> </ul> <p>That's all I got for now. But at the end of the day, just enjoy your meal and have a good time, whether you are downing the expensive shellfish or California rolls. </p>"},{"location":"More%20Randomness/shrek/","title":"Shrek","text":"<pre><code>\u2880\u2874\u2811\u2844\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28c0\u28c0\u28e4\u28e4\u28e4\u28c0\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800 \n\u2838\u2847\u2800\u283f\u2840\u2800\u2800\u2800\u28c0\u2874\u28bf\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28f7\u28e6\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800 \n\u2800\u2800\u2800\u2800\u2811\u2884\u28e0\u283e\u2801\u28c0\u28c4\u2848\u2819\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28c6\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800 \n\u2800\u2800\u2800\u2800\u2880\u2840\u2801\u2800\u2800\u2808\u2819\u281b\u2802\u2808\u28ff\u28ff\u28ff\u28ff\u28ff\u283f\u287f\u28bf\u28c6\u2800\u2800\u2800\u2800\u2800\u2800\u2800 \n\u2800\u2800\u2800\u2880\u287e\u28c1\u28c0\u2800\u2834\u2802\u2819\u28d7\u2840\u2800\u28bb\u28ff\u28ff\u282d\u28a4\u28f4\u28e6\u28e4\u28f9\u2800\u2800\u2800\u2880\u28b4\u28f6\u28c6 \n\u2800\u2800\u2880\u28fe\u28ff\u28ff\u28ff\u28f7\u28ee\u28fd\u28fe\u28ff\u28e5\u28f4\u28ff\u28ff\u287f\u2882\u2814\u289a\u287f\u28bf\u28ff\u28e6\u28f4\u28fe\u2801\u2838\u28fc\u287f \n\u2800\u2880\u285e\u2801\u2819\u283b\u283f\u281f\u2809\u2800\u281b\u28b9\u28ff\u28ff\u28ff\u28ff\u28ff\u28cc\u28a4\u28fc\u28ff\u28fe\u28ff\u285f\u2809\u2800\u2800\u2800\u2800\u2800 \n\u2800\u28fe\u28f7\u28f6\u2807\u2800\u2800\u28e4\u28c4\u28c0\u2840\u2808\u283b\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2847\u2800\u2800\u2800\u2800\u2800\u2800 \n\u2800\u2809\u2808\u2809\u2800\u2800\u28a6\u2848\u28bb\u28ff\u28ff\u28ff\u28f6\u28f6\u28f6\u28f6\u28e4\u28fd\u2879\u28ff\u28ff\u28ff\u28ff\u2847\u2800\u2800\u2800\u2800\u2800\u2800 \n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2809\u2832\u28fd\u287b\u28bf\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28f7\u28dc\u28ff\u28ff\u28ff\u2847\u2800\u2800\u2800\u2800\u2800\u2800 \n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28f7\u28f6\u28ee\u28ed\u28fd\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2800\u2800\u2800\u2800\u2800\u2800\u2800 \n\u2800\u2800\u2800\u2800\u2800\u2800\u28c0\u28c0\u28c8\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2807\u2800\u2800\u2800\u2800\u2800\u2800\u2800 \n\u2800\u2800\u2800\u2800\u2800\u2800\u28bf\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2803\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800 \n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2839\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u287f\u281f\u2801\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800 \n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2809\u281b\u283b\u283f\u283f\u283f\u283f\u281b\u2809\n</code></pre>"},{"location":"Tech%20Bits%20%26%20Tutorials/docker/","title":"Docker tips, example compose files, &amp; troubleshooting","text":""},{"location":"Tech%20Bits%20%26%20Tutorials/docker/#compose-examples","title":"Compose examples","text":""},{"location":"Tech%20Bits%20%26%20Tutorials/docker/#running-compose-projects","title":"Running compose projects","text":"<pre><code>docker compose up -d\ndocker compose down\ndocker compose up -d --force-recreate\ndocker compose pull\n</code></pre>"},{"location":"Tech%20Bits%20%26%20Tutorials/docker/#traefik-docker-composeyml","title":"Traefik docker-compose.yml","text":"<p>Notes:</p> <ul> <li>\ud83d\udca1CHANGE ME\ud83d\udca1</li> <li>Use environment variables e.g. ${ENV_VAR} and do not expose secrets in your code</li> <li>This example uses Cloudflare for SSL/TLS</li> </ul> <pre><code>version: '3'\n\nservices:\n  traefik:\n    image: traefik:latest\n    container_name: traefik\n    restart: unless-stopped\n    security_opt:\n      - no-new-privileges:true\n    networks:\n      - proxy\n    ports:\n      - 80:80\n      - 443:443\n    environment:\n      - CF_DNS_API_TOKEN=${CF_API_TOKEN}\n      # Docs on how to generate an API token in Cloudflare: [https://developers.cloudflare.com/fundamentals/api/get-started/create-token/#:~:text=From%20the%20Cloudflare%20dashboard%20%E2%86%97,Select%20Create%20Token.](https://developers.cloudflare.com/fundamentals/api/get-started/create-token/#:~:text=From%20the%20Cloudflare%20dashboard%20%E2%86%97,Select%20Create%20Token.)\n    volumes:\n      - /etc/localtime:/etc/localtime:ro\n      - /var/run/docker.sock:/var/run/docker.sock:ro\n      - /home/${HOME_DIR_USER}/traefik/data/traefik.yml:/traefik.yml:ro\n      - /home/${HOME_DIR_USER}/traefik/data/acme.json:/acme.json\n      - /home/${HOME_DIR_USER}/traefik/data/config.yml:/config.yml:ro\n    labels:\n      - \"traefik.enable=true\"\n      - \"traefik.http.routers.traefik.entrypoints=http\"\n      - \"traefik.http.routers.traefik.rule=Host(`\ud83d\udca1traefik.yourdomain.com\ud83d\udca1`)\"\n      - \"traefik.http.middlewares.traefik-auth.basicauth.users=${HTTP_BASIC_USER}:${HTTP_BASIC_PWD}\"\n      - \"traefik.http.middlewares.traefik-https-redirect.redirectscheme.scheme=https\"\n      - \"traefik.http.middlewares.sslheader.headers.customrequestheaders.X-Forwarded-Proto=https\"\n      - \"traefik.http.routers.traefik.middlewares=traefik-https-redirect\"\n      - \"traefik.http.routers.traefik-secure.entrypoints=https\"\n      - \"traefik.http.routers.traefik-secure.rule=Host(`\ud83d\udca1traefik.yourdomain.com\ud83d\udca1`)\"\n      - \"traefik.http.routers.traefik-secure.middlewares=traefik-auth\"\n      - \"traefik.http.routers.traefik-secure.tls=true\"\n      - \"traefik.http.routers.traefik-secure.tls.certresolver=cloudflare\"\n      - \"traefik.http.routers.traefik-secure.tls.domains[0].main=\ud83d\udca1yourdomain.com\ud83d\udca1\"\n      - \"traefik.http.routers.traefik-secure.tls.domains[0].sans=*.\ud83d\udca1yourdomain.com\ud83d\udca1\"\n      - \"traefik.http.routers.traefik-secure.service=api@internal\"\n\nnetworks:\n  proxy:\n    external: true\n</code></pre>"},{"location":"Tech%20Bits%20%26%20Tutorials/docker/#pterodactyl-traefik-cloudflare-on-docker-compose","title":"Pterodactyl + Traefik + Cloudflare on Docker Compose","text":"<p>Notes:</p> <ul> <li>Use environment variables: <code>.env</code> file and <code>${ENV_VAR}</code> in your code. Do not expose secrets in public repositories.</li> <li>Wings Daemon: even though the documentation says port 8443 is needed for Cloudflare proxy, I didn't have issues with port 443.</li> <li>Browser console and docker logs can give clues to issues with connecting to the Wings nodes.</li> <li>Do not be led astray by CORS errors, they are possibly issues with the reverse proxy configuration and not actually CORS-related (in some cases).</li> </ul> <p>Credits:</p> <ul> <li>Adapted from Jims's Garage, plus a few changes I needed to make it work for me.</li> <li>Pterodactyl Discord</li> </ul> <p><code>compose.yml</code>:</p> <pre><code>services:\n  db:\n    image: mariadb:latest\n    container_name: pterodactyl_mariadb\n    restart: unless-stopped\n    command: --default-authentication-plugin=mysql_native_password\n    volumes:\n      - ./panel/db:/var/lib/mysql\n    environment:\n      MYSQL_DATABASE: panel\n      MYSQL_USER: pterodactyl\n      MYSQL_PASSWORD: ${DB_PASSWORD}\n      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}\n    networks:\n      - pterodactyl-network\n\n  cache:\n    image: redis:alpine\n    container_name: pterodactyl_redis\n    restart: unless-stopped\n    networks:\n      - pterodactyl-network\n\n  panel:\n    image: ghcr.io/pterodactyl/panel:latest\n    container_name: pterodactyl_panel\n    restart: unless-stopped\n    stdin_open: true\n    tty: true\n# port required if you do not use a reverse proxy\n#    ports:\n#      - 8080:80\n#      - 8443:443 # OPTIONAL\n    volumes:\n      - \"./panel/var/:/app/var/\"\n      - \"./panel/logs/:/app/storage/logs\"\n      - \"./panel/nginx/:/etc/nginx/conf.d/\"\n    environment:\n      RECAPTCHA_ENABLED: false\n      TZ: Etc/UTC\n      APP_TIMEZONE: US/Pacific\n      APP_KEY: ${APP_KEY}\n      APP_ENV: production\n      APP_ENVIRONMENT_ONLY: false\n      APP_URL: ${PANEL_DOMAIN}\n      APP_SERVICE_AUTHOR: ${MAIL_FROM_ADDRESS}\n      MAIL_FROM: ${MAIL_FROM_ADDRESS}\n      MAIL_DRIVER: smtp\n      MAIL_HOST: ${MAIL_HOST}\n      MAIL_PORT: ${MAIL_PORT}\n      MAIL_USERNAME: ${MAIL_USERNAME}\n      MAIL_PASSWORD: ${MAIL_PASSWORD}\n      MAIL_ENCRYPTION: false\n      TRUSTED_PROXIES: \"*\"\n      PTERODACTYL_TELEMETRY_ENABLED: false\n      DB_HOST: db\n      DB_PORT: 3306\n      DB_USERNAME: pterodactyl\n      DB_PASSWORD: ${DB_PASSWORD}\n      CACHE_DRIVER: redis\n      SESSION_DRIVER: redis\n      QUEUE_DRIVER: redis\n      REDIS_HOST: cache\n#      LE_EMAIL: \"\" # Uncomment if you want to use Let's Encrypt to generate an SSL certificate for the Panel.\n    networks:\n      - proxy\n      - pterodactyl-network\n    labels:\n      - \"traefik.enable=true\"\n      - \"traefik.docker.network=proxy\"\n      - \"traefik.http.routers.panel.entrypoints=web\"\n      - \"traefik.http.routers.panel.rule=Host(`${PANEL_DOMAIN}`)\"\n      - \"traefik.http.middlewares.panel-https-redirect.redirectscheme.scheme=https\"\n      - \"traefik.http.routers.panel.middlewares=panel-https-redirect\"\n      - \"traefik.http.routers.panel-secure.entrypoints=websecure\"\n      - \"traefik.http.routers.panel-secure.rule=Host(`${PANEL_DOMAIN}`)\"\n      - \"traefik.http.routers.panel-secure.tls=true\"\n      - \"traefik.http.routers.panel-secure.tls.certresolver=cloudflare\"\n      - \"traefik.http.routers.panel-secure.service=panel\"\n      - \"traefik.http.services.panel.loadbalancer.server.port=80\" # make sure the loadbalancer is the last line!!!\n\n  wings:\n    image: ghcr.io/pterodactyl/wings:latest\n    container_name: pterodactyl_wings\n    restart: unless-stopped\n    ports:\n      - 2022:2022 # SFTP\n    stdin_open: true\n    tty: true\n    environment:\n      TZ: US/Pacific\n      APP_TIMEZONE: US/Pacific\n      WINGS_UID: 1000\n      WINGS_GID: 1000\n      WINGS_USERNAME: pterodactyl\n    volumes:\n      - \"/var/run/docker.sock:/var/run/docker.sock\"\n      - \"/var/lib/docker/containers/:/var/lib/docker/containers/\"\n      - \"/etc/pterodactyl/:/etc/pterodactyl/\"\n      - \"/var/lib/pterodactyl/:/var/lib/pterodactyl/\"\n      - \"/var/log/pterodactyl/:/var/log/pterodactyl/\"\n      - \"/tmp/pterodactyl/:/tmp/pterodactyl/\"\n      - \"/etc/ssl/certs:/etc/ssl/certs:ro\"\n    networks:\n      - proxy\n      - wings0\n    labels:\n      - \"traefik.enable=true\"\n      - \"traefik.docker.network=proxy\"\n      - \"traefik.http.routers.wings0.entrypoints=web\"\n      - \"traefik.http.routers.wings0.rule=Host(`${WINGS_DOMAIN}`)\"\n      - \"traefik.http.middlewares.wings0-https-redirect.redirectscheme.scheme=https\"\n      - \"traefik.http.routers.wings0.middlewares=wings0-https-redirect\"\n      - \"traefik.http.routers.wings0-secure.entrypoints=websecure\"\n      - \"traefik.http.routers.wings0-secure.rule=Host(`${WINGS_DOMAIN}`)\"\n      - \"traefik.http.routers.wings0-secure.tls=true\"\n      - \"traefik.http.routers.wings0-secure.tls.certresolver=cloudflare\"\n      - \"traefik.http.routers.wings0-secure.service=wings0\"\n      - \"traefik.http.services.wings0.loadbalancer.server.port=443\" # make sure the loadbalancer is the last line!!!\n\nnetworks:\n  pterodactyl-network:\n    name: pterodactyl-network\n  proxy:\n    external: true\n  wings0:\n    name: wings0\n    driver: bridge\n    ipam:\n      config:\n        - subnet: \"172.21.0.0/16\" # Change this if needed. Make sure this doesn't conflict with existing networks\n    driver_opts:\n      com.docker.network.bridge.name: wings0\n</code></pre> <p>Run:</p> <p><code>docker compose up -d</code></p> <ul> <li>Other useful commands if needed:</li> </ul> <pre><code>docker compose up -d --force-recreate\n\n# if you split your compose files between Panel and Wings\ndocker compose -f compose.panel.yml up -d \ndocker compose -f compose.wings.yml up -d \n\n# Show logs\ndocker compose logs -f\n</code></pre> <p>After the first time Panel is running (Wings will fail at this time):</p> <ul> <li>Create admin user, follow terminal input prompts</li> </ul> <p><code>docker exec -it pterodactyl_panel php artisan p:user:make</code></p> <ul> <li>Create a Location</li> <li>Create a Node</li> <li>Use SSL Connection: Yes</li> <li>Behind Proxy: Yes</li> <li>Daemon Port: 443</li> <li>Save the Node and go to the Configuration tab</li> <li>Copy and paste this to the server local file <code>/etc/pterodactyl/config.yml</code> (create it if it doesn't exist)</li> <li>Copy and paste the following to the end of the above <code>config.yml</code>, otherwise you may get some CORS errors in the browser console.</li> </ul> <pre><code>docker:\n  network:\n    interface: 172.18.0.1\n    dns:\n    - 1.1.1.1\n    - 1.0.0.1\n    name: pterodactyl_nw\n    ispn: false\n    driver: bridge\n    network_mode: pterodactyl_nw\n    is_internal: false\n    enable_icc: true\n    interfaces:\n      v4:\n        subnet: 172.18.0.0/16\n        gateway: 172.18.0.1\n      v6:\n        subnet: fdba:17c8:6c94::/64\n        gateway: fdba:17c8:6c94::1011\n  domainname: \"\"\n  registries: {}\n  tmpfs_size: 100\n</code></pre> <ul> <li>change the <code>interface</code>, <code>subnet</code>, and <code>gateway</code> to match what you put for the <code>wings0</code> network in your <code>compose.yml</code> file.</li> <li>Check the Nodes List, if you have a green heart icon, you're golden!</li> </ul>"},{"location":"Tech%20Bits%20%26%20Tutorials/pfsense-nswitch/","title":"Nintendo Switch Online in a pfSense network","text":"<p>Nintendo Switch online gaming with a pfsense router (How to achieve NAT Type B e.g. for Animal Crossing!)</p> <p></p> <p>This info may be outdated as I've done this few years ago on pfsense 2.4.5 for the purpose of visiting friends' islands in Animal Crossing: New Horizons for the Nintendo Switch. It's been a while since I've played, but I imagine this still works.</p> <p>Status &gt; DHCP Leases</p> <ul> <li>Find the MAC address of your Switch</li> <li>Click the Add static mapping button </li> <li>Give it an IP Address in the subnet your interface is on, and a Description like \"Nintendo Switch\" Save</li> </ul> <p>Firewall &gt; NAT &gt; Outbound</p> <ul> <li>Add a mapping with the Nintendo Switch IP and Static Port checked under the Translation &gt; Port or Range section</li> </ul> <p></p> <p>We want to achieve NAT Type B to be able to traverse islands in AC:NH (and probably other games with online features), and by default, my Switch was on NAT Type D while connected to my network. After hours of playing around, I finally found that the above steps worked.</p>"},{"location":"Tech%20Bits%20%26%20Tutorials/protonvpn-pfsense-wireguard/","title":"ProtonVPN on pfsense 2.6.x with WireGuard","text":"<p>Note: this document explains configuring a standard ProtonVPN server, not Secure Core. Though configuring that is probably similar.</p> <p>In ProtonVPN WireGuard settings, select platform Router, your server of choice, and any optional settings. Click Create when you're done.</p> <p></p> <p>You'll see some configuration details generated at the top that looks like this:</p> <pre><code>    [Interface]\n    # Key for ProtonVPN WireGuard\n    # NetShield = 1\n    # Moderate NAT = off\n    # VPN Accelerator = on\n    PrivateKey = &lt;redacted&gt;\n    Address = &lt;redacted&gt;/32\n    DNS = &lt;redacted&gt;\n\n    [Peer]\n    # US-CA#77\n    PublicKey = &lt;redacted&gt;\n    AllowedIPs = 0.0.0.0/0\n    Endpoint = &lt;endpoint_ip_of_US-CA#77&gt;:51820\n</code></pre> <p>In pfsense, go to VPN &gt; WireGuard.</p> <p></p> <p>Click Add Tunnel.</p> <p></p> <p>Now you should be in a tunnel configuration screen.</p> <p></p> <p>Give a Description like ProtonVPN WireGuard</p> <p>Listen Port default is 51820</p> <p>Copy and paste PrivateKey from ProtonVPN config <code>[Interface]</code> to Interface Keys: Private Key</p> <p>Click Save Tunnel</p> <p>Now let's add a Peer for the tunnel</p> <p></p> <p>Description: give it something that makes sense to you, like the name of the ProtonVPN server Dynamic Endpoint: uncheck Endpoint: Endpoint IP from the ProtonVPN config <code>[Peer]</code> Public Key: PublicKey from the ProtonVPN config <code>[Peer]</code> Allowed IPs: <code>0.0.0.0/0</code> (this means any traffic is allowed)</p> <p>Go to Interfaces &gt; Interface Assignments and select Available network ports your newly created <code>tun_wg0</code> or similar and then click Add</p> <p>Click the new interface (OPT#) and enter: Description: something like ProtonVPNWireGuard IPv4 Configuration Type: Static IPv4 IPv4 Address: the Address in ProtonVPN config <code>[Interface]</code> IPv4 Upstream gateway: click Add a new gateway and just click Add. You can review settings in System &gt; Routing Save</p> <p>Go to Firewall &gt; Rules and set up the rule for the interfaces you want its devices to be always on VPN, such as LAN, WIFI, GUEST, etc.. The rule might look like this</p> <p></p> <p>where <code>VPN_Only</code> is my alias for all networks/IPs I want VPN on, any to any traffic, and <code>ProtonVPNWireGuardGW</code> is the Gateway the rule uses to route Make sure this rule is BELOW a rule you DON'T want traffic to route to VPN i.e. using default gateway e.g.</p> <p></p> <p>Similarly you can make rules above this for pfBlocker aliases to allow Netflix traffic to go over the default interface. That may be a future post.</p> <p>Go to System &gt; Routing &gt; Gateways, and give it a Monitor IP of an internet IP, such as Google's DNS server <code>8.8.8.8</code> or <code>8.8.4.4</code></p> <p>This will allow you to monitor the status of the interface. By default, it would just ping itself which is obviously 100% uptime. You want to see something like this in the dashboard</p> <p>Done.</p>"},{"location":"Tech%20Bits%20%26%20Tutorials/unix/","title":"Unix tips &amp; troubleshooting","text":""},{"location":"Tech%20Bits%20%26%20Tutorials/unix/#gcp-selinux-commands-for-github-actions-runner-in-centos","title":"GCP - SELinux commands for GitHub Actions runner in CentOS","text":"<p><code>sudo semanage fcontext --add --type initrc_exec_t /&lt;fullpath&gt;/runsvc.sh</code> <code>restorecon -v /&lt;fullpath&gt;/runsvc.sh</code> <code>sudo ./svc.sh start</code> <code>sudo ./svc.sh status</code></p>"},{"location":"Tech%20Bits%20%26%20Tutorials/unix/#generate-ed25519-keypair-add-to-remote-ssh","title":"Generate ed25519 keypair &amp; add to remote SSH","text":"<p>Generate ed25519 keypair: <code>ssh-keygen -t ed25519 -C \"hello@example.com\"</code></p> <p>The public and private key pair will be saved, for example, in <code>~/.ssh/id_ed25519</code> and <code>~/.ssh/id_ed25519.pub</code>. The <code>.pub</code> file is the public key.</p> <p>Configure remote SSH system to accept passwordless login:</p> <ul> <li>open <code>~/.ssh/authorized_hosts</code> in your preferred editor</li> <li>copy the PUBLIC key to a new line <code>ssh-ed25519 publicKey hello@example.com</code></li> </ul>"},{"location":"Tech%20Bits%20%26%20Tutorials/unix/#ssh-backspace-doesnt-work","title":"SSH - Backspace doesn't work","text":"<p>add to ~/.ssh/config</p> <pre><code>Host *\n    SetEnv TERM=xterm-256color\n</code></pre>"},{"location":"Tech%20Bits%20%26%20Tutorials/unix/#wiping-a-drive","title":"Wiping a drive","text":"<p><code>dd if=/dev/zero of=/dev/sda bs=512</code> or <code>dd if=/dev/random of=/dev/sda bs=512</code> Can be used to wipe a drive and overwritten with zeroes or randoms. This can be done in a liveboot of gparted to see if the correct drive is selected.</p>"},{"location":"Tech%20Bits%20%26%20Tutorials/unix/#iptables-open-webserver-ports-http-and-https","title":"iptables - Open webserver ports (HTTP and HTTPS)","text":"<p>HTTP (80) <code>sudo iptables -I INPUT -p tcp --dport 80 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT</code></p> <p><code>sudo iptables -I OUTPUT -p tcp --sport 80 -m conntrack --ctstate ESTABLISHED -j ACCEPT</code></p> <p>HTTPS (443) <code>sudo iptables -I INPUT -p tcp --dport 443 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT</code></p> <p><code>sudo iptables -I OUTPUT -p tcp --sport 443 -m conntrack --ctstate ESTABLISHED -j ACCEPT</code></p>"}]}